{"version":3,"sources":["scripts/main.js"],"names":["gameGrid","gridSize","gameStarted","gameOver","score","startButt","document","querySelector","restartButt","startMess","winMess","loseMess","scoreElem","gameField","rows","querySelectorAll","startGame","resetGame","generateRandomTile","updateBoard","hideElem","showElem","initializedBoard","restartGame","row","col","push","moveUp","merged","currentCell","currentRow","moveDown","moveRight","currentCol","moveLeft","changeKey","evt","preventDefault","key","isGameOver","emptyCells","randomIndex","randomCell","Math","floor","random","length","randomNumber","innerHTML","forEach","indexRow","cell","indexCol","cellValue","textContent","classList","remove","add","removeEventListener","elem","contains","style","display","toggleButton","btnToHide","btnToShow","currentTile","addEventListener"],"mappings":"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","file":"main.0bcf44fc.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet gameGrid = [];\nconst gridSize = 4;\nlet gameStarted = false;\nlet gameOver = false;\nlet score = 0;\n\nconst startButt = document.querySelector('.start');\nconst restartButt = document.querySelector('.restart');\nconst startMess = document.querySelector('.message.message-start');\nconst winMess = document.querySelector('.message-win');\nconst loseMess = document.querySelector('.message-lose');\nconst scoreElem = document.querySelector('.game-score');\nconst gameField = document.querySelector('.game-field');\nconst rows = gameField.querySelectorAll('.field-row');\n\ndocument.addEventListener('keydown', changeKey);\n\nfunction startGame() {\n  resetGame();\n  generateRandomTile();\n  generateRandomTile();\n  updateBoard();\n\n  gameStarted = true;\n\n  hideElem(startButt);\n  showElem(restartButt);\n}\n\nfunction resetGame() {\n  gameGrid = [];\n  initializedBoard();\n  score = 0;\n  gameOver = false;\n}\n\nfunction restartGame() {\n  startGame();\n  hideElem(loseMess);\n}\n\nrestartButt.addEventListener('click', () => {\n  restartGame();\n});\n\nstartButt.addEventListener('click', () => {\n  toggleButton(startButt, restartButt);\n  hideElem(startMess);\n  startGame();\n  showElem(restartButt);\n});\n\nfunction initializedBoard() {\n  for (let row = 0; row < gridSize; row++) {\n    gameGrid[row] = [];\n\n    for (let col = 0; col < gridSize; col++) {\n      gameGrid[row].push(0);\n    }\n  }\n}\n\nfunction moveUp() {\n  let merged = false;\n\n  for (let col = 0; col < gridSize; col++) {\n    for (let row = 0; row < gridSize; row++) {\n      const currentCell = gameGrid[row][col];\n\n      merged = false;\n\n      if (currentCell !== 0) {\n        let currentRow = row;\n\n        while (\n          currentRow > 0\n          && (gameGrid[row - 1][col] === 0\n            || (gameGrid[row - 1][col] === gameGrid[row][col] && !merged))\n        ) {\n          if (gameGrid[row - 1][col] === 0) {\n            gameGrid[row - 1][col] = gameGrid[row][col];\n            gameGrid[row][col] = 0;\n            merged = false;\n            row = currentRow - 1;\n          } else if (gameGrid[row - 1][col] === gameGrid[row][col]) {\n            if (!merged) {\n              gameGrid[row - 1][col] *= 2;\n              gameGrid[row][col] = 0;\n              score += gameGrid[row - 1][col];\n              merged = true;\n              row = currentRow - 1;\n            }\n          }\n\n          currentRow--;\n        }\n      }\n    }\n  }\n}\n\nfunction moveDown() {\n  let merged = false;\n\n  for (let col = 0; col < gridSize; col++) {\n    for (let row = gridSize - 1; row >= 0; row--) {\n      const currentCell = gameGrid[row][col];\n\n      merged = false;\n\n      if (currentCell !== 0) {\n        let currentRow = row;\n\n        while (\n          currentRow < gridSize - 1\n          && (gameGrid[row + 1][col] === 0\n            || (gameGrid[row + 1][col] === gameGrid[row][col] && !merged))\n        ) {\n          if (gameGrid[row + 1][col] === 0) {\n            gameGrid[row + 1][col] = gameGrid[row][col];\n            gameGrid[row][col] = 0;\n            merged = false;\n            row = currentRow + 1;\n          } else if (gameGrid[row + 1][col] === gameGrid[row][col]) {\n            if (!merged) {\n              gameGrid[row + 1][col] *= 2;\n              gameGrid[row][col] = 0;\n              score += gameGrid[row + 1][col];\n              merged = true;\n              row = currentRow + 1;\n            }\n          }\n\n          currentRow++;\n        }\n      }\n    }\n  }\n}\n\nfunction moveRight() {\n  let merged = false;\n\n  for (let row = 0; row < gridSize; row++) {\n    for (let col = gridSize - 1; col >= 0; col--) {\n      const currentCell = gameGrid[row][col];\n\n      merged = false;\n\n      if (currentCell !== 0) {\n        let currentCol = col;\n\n        while (\n          currentCol < gridSize - 1\n          && (gameGrid[row][col + 1] === 0\n            || (gameGrid[row][col + 1] === gameGrid[row][col] && !merged))\n        ) {\n          if (gameGrid[row][col + 1] === 0) {\n            gameGrid[row][col + 1] = gameGrid[row][col];\n            gameGrid[row][col] = 0;\n            merged = false;\n            col = currentCol + 1;\n          } else if (gameGrid[row][col + 1] === gameGrid[row][col]) {\n            if (!merged) {\n              gameGrid[row][col + 1] *= 2;\n              gameGrid[row][col] = 0;\n              score += gameGrid[row][col + 1];\n              merged = true;\n              col = currentCol + 1;\n            }\n          }\n\n          currentCol++;\n        }\n      }\n    }\n  }\n}\n\nfunction moveLeft() {\n  let merged = false;\n\n  for (let row = 0; row < gridSize; row++) {\n    for (let col = 0; col < gridSize; col++) {\n      const currentCell = gameGrid[row][col];\n\n      merged = false;\n\n      if (currentCell !== 0) {\n        let currentCol = col;\n\n        while (\n          currentCol > 0 && (gameGrid[row][col - 1] === 0\n            || (gameGrid[row][col - 1] === gameGrid[row][col] && !merged))\n        ) {\n          if (gameGrid[row][col - 1] === 0) {\n            gameGrid[row][col - 1] = gameGrid[row][col];\n            gameGrid[row][col] = 0;\n            merged = false;\n            col = currentCol - 1;\n          } else if (gameGrid[row][col - 1] === gameGrid[row][col]) {\n            if (!merged) {\n              gameGrid[row][col - 1] *= 2;\n              gameGrid[row][col] = 0;\n              score += gameGrid[row][col - 1];\n              merged = true;\n              col = currentCol - 1;\n            }\n          }\n\n          currentCol--;\n        }\n      }\n    }\n  }\n}\n\nfunction changeKey(evt) {\n  evt.preventDefault();\n\n  if (!gameOver && gameStarted) {\n    switch (evt.key) {\n      case 'ArrowUp':\n        moveUp();\n        break;\n      case 'ArrowDown':\n        moveDown();\n        break;\n      case 'ArrowLeft':\n        moveLeft();\n        break;\n      case 'ArrowRight':\n        moveRight();\n        break;\n    }\n\n    generateRandomTile();\n    updateBoard();\n    isGameOver();\n  }\n}\n\nfunction generateRandomTile() {\n  const emptyCells = [];\n\n  for (let row = 0; row < gridSize; row++) {\n    for (let col = 0; col < gridSize; col++) {\n      if (gameGrid[row][col] === 0) {\n        emptyCells.push({\n          row,\n          col,\n        });\n      }\n    }\n  }\n\n  const randomIndex = Math.floor(Math.random() * emptyCells.length);\n  const randomCell = emptyCells[randomIndex];\n  const randomNumber = Math.random() < 0.9 ? 2 : 4;\n\n  gameGrid[randomCell.row][randomCell.col] = randomNumber;\n}\n\nfunction updateBoard() {\n  scoreElem.innerHTML = score;\n\n  rows.forEach((row, indexRow) => {\n    const cells = row.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, indexCol) => {\n      const cellValue = gameGrid[indexRow][indexCol];\n\n      if (cell.textContent) {\n        cell.classList.remove(`field-cell--${cell.textContent}`);\n      }\n\n      if (cellValue) {\n        cell.classList.add(`field-cell--${cellValue}`);\n      }\n\n      cell.textContent = cellValue > 0 ? cellValue : '';\n\n      if (cellValue === 2048) {\n        showElem(winMess);\n        document.removeEventListener('keydown', changeKey);\n      }\n    });\n  });\n}\n\nfunction showElem(elem) {\n  elem.classList.remove('hidden');\n\n  if (elem.classList.contains('restart')) {\n    elem.style.display = 'inline-block';\n  }\n}\n\nfunction hideElem(elem) {\n  elem.classList.add('hidden');\n}\n\nfunction toggleButton(btnToHide, btnToShow) {\n  hideElem(btnToHide);\n  showElem(btnToShow);\n}\n\nfunction isGameOver() {\n  for (let row = 0; row < gridSize; row++) {\n    for (let col = 0; col < gridSize; col++) {\n      if (gameGrid[row][col] === 0) {\n        return;\n      }\n    }\n  }\n\n  for (let row = 0; row < gridSize; row++) {\n    for (let col = 0; col < gridSize; col++) {\n      const currentTile = gameGrid[row][col];\n\n      if (\n        (row > 0 && gameGrid[row - 1][col] === currentTile)\n        || (row < gridSize - 1 && gameGrid[row + 1][col] === currentTile)\n        || (col > 0 && gameGrid[row][col - 1] === currentTile)\n        || (col < gridSize - 1 && gameGrid[row][col + 1] === currentTile)\n      ) {\n        return;\n      }\n    }\n  }\n\n  gameOver = true;\n  showElem(loseMess);\n}\n"]}